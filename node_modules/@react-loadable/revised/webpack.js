"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.ReactLoadablePlugin = void 0;
var path_1 = __importDefault(require("path"));
var webpack_1 = __importStar(require("webpack"));
var isOriginDynamicImported = function (origin, _chunkGroup) {
    // check if origin is imported via import()
    // for (const chunk of chunkGroup.chunks)
    // 	for (const md of chunk.getModules())
    // 		for (const {type, userRequest} of md.reasons)
    // 			if (userRequest === origin.request && type === 'import()') return true
    // return false
    return !!origin.request;
};
var getAssetsOfChunkGroups = function (chunkGroups) {
    var e_1, _a, e_2, _b;
    if (!chunkGroups)
        return;
    var assets = new Set();
    try {
        for (var chunkGroups_1 = __values(chunkGroups), chunkGroups_1_1 = chunkGroups_1.next(); !chunkGroups_1_1.done; chunkGroups_1_1 = chunkGroups_1.next()) {
            var chunkGroup = chunkGroups_1_1.value;
            try {
                for (var _c = (e_2 = void 0, __values(chunkGroup.getFiles())), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var asset = _d.value;
                    assets.add(asset);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c["return"])) _b.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (chunkGroups_1_1 && !chunkGroups_1_1.done && (_a = chunkGroups_1["return"])) _a.call(chunkGroups_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return __spreadArray([], __read(assets.values()), false);
};
var buildManifest = function (compilation, _a) {
    var e_3, _b, e_4, _c, e_5, _d, e_6, _e, e_7, _f, e_8, _g;
    var _h, _j;
    var moduleNameTransform = _a.moduleNameTransform, absPath = _a.absPath;
    var entryToId = {};
    var runtimeAssets = {};
    var includedChunkGroups = new Set();
    try {
        // always add entries
        for (var _k = __values(compilation.chunkGroups), _l = _k.next(); !_l.done; _l = _k.next()) {
            var chunkGroup = _l.value;
            if (chunkGroup.isInitial()) {
                entryToId[chunkGroup.name] = chunkGroup.id;
                includedChunkGroups.add(chunkGroup.id);
                runtimeAssets[chunkGroup.id] = __spreadArray([], __read(chunkGroup.getRuntimeChunk().files.values()), false);
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_l && !_l.done && (_b = _k["return"])) _b.call(_k);
        }
        finally { if (e_3) throw e_3.error; }
    }
    // get map of origin to chunk groups
    var originToChunkGroups = {};
    try {
        for (var _m = __values(compilation.chunkGroups), _o = _m.next(); !_o.done; _o = _m.next()) {
            var chunkGroup = _o.value;
            try {
                for (var _p = (e_5 = void 0, __values(chunkGroup.origins)), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var origin_1 = _q.value;
                    if (isOriginDynamicImported(origin_1, chunkGroup)) {
                        includedChunkGroups.add(chunkGroup.id);
                        var absModuleName = absPath && ((_h = origin_1.request) === null || _h === void 0 ? void 0 : _h.startsWith('./')) && ((_j = origin_1.module) === null || _j === void 0 ? void 0 : _j.context)
                            ? path_1["default"].resolve(origin_1.module.context, origin_1.request)
                            : origin_1.request;
                        var moduleName = moduleNameTransform ? moduleNameTransform(absModuleName) : absModuleName;
                        if (!originToChunkGroups[moduleName])
                            originToChunkGroups[moduleName] = [];
                        if (!originToChunkGroups[moduleName].includes(chunkGroup.id))
                            originToChunkGroups[moduleName].push(chunkGroup.id);
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_d = _p["return"])) _d.call(_p);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_o && !_o.done && (_c = _m["return"])) _c.call(_m);
        }
        finally { if (e_4) throw e_4.error; }
    }
    var chunkGroupAssets = {};
    var preloadAssets = {};
    var prefetchAssets = {};
    var chunkGroupSizes = {};
    try {
        for (var _r = __values(compilation.chunkGroups), _s = _r.next(); !_s.done; _s = _r.next()) {
            var chunkGroup = _s.value;
            if (includedChunkGroups.has(chunkGroup.id)) {
                //get map of chunk group to assets
                chunkGroupAssets[chunkGroup.id] = chunkGroup.getFiles();
                //get chunk group size
                var size = 0;
                try {
                    for (var _t = (e_7 = void 0, __values(chunkGroup.chunks)), _u = _t.next(); !_u.done; _u = _t.next()) {
                        var chunk = _u.value;
                        size += compilation.chunkGraph
                            ? compilation.chunkGraph.getChunkSize(chunk)
                            : chunk.size();
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (_u && !_u.done && (_f = _t["return"])) _f.call(_t);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
                chunkGroupSizes[chunkGroup.id] = size;
                //child assets
                var _v = chunkGroup.getChildrenByOrders(compilation.moduleGraph, compilation.chunkGraph), prefetch = _v.prefetch, preload = _v.preload;
                preloadAssets[chunkGroup.id] = getAssetsOfChunkGroups(preload);
                prefetchAssets[chunkGroup.id] = getAssetsOfChunkGroups(prefetch);
            }
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (_s && !_s.done && (_e = _r["return"])) _e.call(_r);
        }
        finally { if (e_6) throw e_6.error; }
    }
    try {
        //sort for the greedy cover set algorithm
        for (var _w = __values(Object.values(originToChunkGroups)), _x = _w.next(); !_x.done; _x = _w.next()) {
            var chunkGroups = _x.value;
            chunkGroups.sort(function (cg1, cg2) { return chunkGroupSizes[cg1] - chunkGroupSizes[cg2]; });
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (_x && !_x.done && (_g = _w["return"])) _g.call(_w);
        }
        finally { if (e_8) throw e_8.error; }
    }
    return {
        publicPath: compilation.outputOptions.publicPath,
        originToChunkGroups: originToChunkGroups,
        chunkGroupAssets: chunkGroupAssets,
        preloadAssets: preloadAssets,
        prefetchAssets: prefetchAssets,
        runtimeAssets: runtimeAssets,
        entryToId: entryToId
    };
};
var pluginName = '@react-loadable/revised';
var ReactLoadablePlugin = /** @class */ (function () {
    function ReactLoadablePlugin(options) {
        this.options = options;
    }
    ReactLoadablePlugin.prototype.apply = function (compiler) {
        var _this = this;
        var emit = function (compilation) { return __awaiter(_this, void 0, void 0, function () {
            var manifest, e_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        manifest = buildManifest(compilation, {
                            moduleNameTransform: this.options.moduleNameTransform,
                            absPath: this.options.absPath
                        });
                        return [4 /*yield*/, this.options.callback(manifest)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_9 = _a.sent();
                        compilation.errors.push(e_9);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        if (compiler.hooks) {
            if (webpack_1["default"].version.slice(0, 2) === '4.')
                compiler.hooks.emit.tap(pluginName, emit);
            // hooks.thisCompilation is recommended over hooks.compilation
            // https://github.com/webpack/webpack/issues/11425#issuecomment-690547848
            else
                compiler.hooks.thisCompilation.tap(pluginName, function (compilation) {
                    compilation.hooks.processAssets.tap({
                        name: pluginName,
                        stage: webpack_1.Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE
                    }, function () { return emit(compilation); });
                });
            compiler.hooks.emit.tap(pluginName, emit);
        }
        else
            compiler.plugin('emit', emit);
    };
    return ReactLoadablePlugin;
}());
exports.ReactLoadablePlugin = ReactLoadablePlugin;
