"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.getBundles = void 0;
var getBundles = function (_a, moduleIds, _b) {
    var e_1, _c, e_2, _d, e_3, _e;
    var defaultPublicPath = _a.publicPath, originToChunkGroups = _a.originToChunkGroups, chunkGroupAssets = _a.chunkGroupAssets, preloadAssets = _a.preloadAssets, prefetchAssets = _a.prefetchAssets, runtimeAssets = _a.runtimeAssets, entryToId = _a.entryToId;
    var _f = _b === void 0 ? {} : _b, entries = _f.entries, includeSourceMap = _f.includeSourceMap, includeHotUpdate = _f.includeHotUpdate, publicPath = _f.publicPath, preserveEntriesOrder = _f.preserveEntriesOrder;
    if (typeof publicPath !== 'string')
        publicPath = defaultPublicPath || '';
    var assetFilter = function (file) {
        var fileWithoutQuery = file.split('?')[0];
        return (includeHotUpdate || !/\.hot-update\.js$/.test(fileWithoutQuery))
            && (fileWithoutQuery.endsWith('.js')
                || fileWithoutQuery.endsWith('.css')
                || (includeSourceMap && fileWithoutQuery.endsWith('.map')));
    };
    if (!entries)
        entries = ['main'];
    try {
        for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
            var entry = entries_1_1.value;
            if (!entryToId[entry])
                console.warn("Cannot find chunk group id for entry ".concat(entry));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (entries_1_1 && !entries_1_1.done && (_c = entries_1["return"])) _c.call(entries_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    entries = entries.map(function (entry) { return entryToId[entry]; });
    var chunkGroups = new Set();
    var assets = new Set();
    var preload = new Set();
    var prefetch = new Set();
    var addChunkGroup = function (chunkGroup) {
        var e_4, _a, e_5, _b, e_6, _c;
        if (chunkGroups.has(chunkGroup))
            return;
        chunkGroups.add(chunkGroup);
        if (!chunkGroupAssets[chunkGroup]) {
            console.warn("Cannot find chunk group ".concat(chunkGroup));
            return;
        }
        try {
            for (var _d = __values((chunkGroupAssets[chunkGroup] || []).filter(assetFilter)), _e = _d.next(); !_e.done; _e = _d.next()) {
                var asset = _e.value;
                assets.add(asset);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d["return"])) _a.call(_d);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            for (var _f = __values((preloadAssets[chunkGroup] || []).filter(assetFilter)), _g = _f.next(); !_g.done; _g = _f.next()) {
                var asset = _g.value;
                preload.add(asset);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_b = _f["return"])) _b.call(_f);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            for (var _h = __values((prefetchAssets[chunkGroup] || []).filter(assetFilter)), _j = _h.next(); !_j.done; _j = _h.next()) {
                var asset = _j.value;
                prefetch.add(asset);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_c = _h["return"])) _c.call(_h);
            }
            finally { if (e_6) throw e_6.error; }
        }
    };
    try {
        for (var entries_2 = __values(entries), entries_2_1 = entries_2.next(); !entries_2_1.done; entries_2_1 = entries_2.next()) {
            var entry = entries_2_1.value;
            addChunkGroup(entry);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (entries_2_1 && !entries_2_1.done && (_d = entries_2["return"])) _d.call(entries_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    try {
        for (var moduleIds_1 = __values(moduleIds), moduleIds_1_1 = moduleIds_1.next(); !moduleIds_1_1.done; moduleIds_1_1 = moduleIds_1.next()) {
            var moduleId = moduleIds_1_1.value;
            var includingChunkGroups = originToChunkGroups[moduleId];
            if (!includingChunkGroups) {
                console.warn("Can not determine chunk group for module id ".concat(moduleId));
                continue;
            }
            if (includingChunkGroups.some(function (chunkGroup) { return chunkGroups.has(chunkGroup); }))
                continue;
            addChunkGroup(includingChunkGroups[0]);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (moduleIds_1_1 && !moduleIds_1_1.done && (_e = moduleIds_1["return"])) _e.call(moduleIds_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    var getOrder = function (asset) {
        var e_7, _a, e_8, _b;
        var _c, _d;
        if (!asset.endsWith('.js'))
            return 0;
        try {
            for (var entries_3 = __values(entries), entries_3_1 = entries_3.next(); !entries_3_1.done; entries_3_1 = entries_3.next()) {
                var entry = entries_3_1.value;
                if ((_c = runtimeAssets[entry]) === null || _c === void 0 ? void 0 : _c.includes(asset))
                    return -1;
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (entries_3_1 && !entries_3_1.done && (_a = entries_3["return"])) _a.call(entries_3);
            }
            finally { if (e_7) throw e_7.error; }
        }
        try {
            for (var entries_4 = __values(entries), entries_4_1 = entries_4.next(); !entries_4_1.done; entries_4_1 = entries_4.next()) {
                var entry = entries_4_1.value;
                if ((_d = chunkGroupAssets[entry]) === null || _d === void 0 ? void 0 : _d.includes(asset))
                    return 1;
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (entries_4_1 && !entries_4_1.done && (_b = entries_4["return"])) _b.call(entries_4);
            }
            finally { if (e_8) throw e_8.error; }
        }
        return 0;
    };
    var assetToArray = function (assets) { return (function (values) { return preserveEntriesOrder
        ? values
        : values.map(function (asset, index) { return [asset, index]; })
            .sort(function (_a, _b) {
            var _c = __read(_a, 2), as1 = _c[0], index1 = _c[1];
            var _d = __read(_b, 2), as2 = _d[0], index2 = _d[1];
            return getOrder(as1) - getOrder(as2) || index1 - index2;
        })
            .map(function (_a) {
            var _b = __read(_a, 1), asset = _b[0];
            return asset;
        }); })(__spreadArray([], __read(assets.values()), false))
        .map(function (file) { return "".concat(publicPath).concat(file); }); };
    return {
        assets: assetToArray(assets),
        preload: assetToArray(preload),
        prefetch: assetToArray(prefetch)
    };
};
exports.getBundles = getBundles;
