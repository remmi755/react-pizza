{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { calcTotalPrice } from '../../../utils/calcTotalPrice';\nimport { GetCartFromLs } from '../../../utils/getCartFromLS';\nconst {\n  items,\n  totalPrice\n} = GetCartFromLs();\nconst initialState = {\n  totalPrice,\n  items\n};\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItem: (state, action) => {\n      const findItem = state.items.find(obj => obj.id === action.payload.id);\n      if (findItem) {\n        findItem.count++;\n      } else {\n        state.items.push({\n          ...action.payload,\n          count: 1\n        });\n      }\n      state.totalPrice = calcTotalPrice(state.items);\n    },\n    minusItem: (state, action) => {\n      const findItem = state.items.find(obj => obj.id === action.payload);\n      if (findItem) {\n        findItem.count--;\n      }\n      state.totalPrice = state.items.reduce((sum, obj) => obj.price * obj.count + sum, 0);\n    },\n    removeItem: (state, action) => {\n      state.items = state.items.filter(obj => obj.id !== action.payload);\n      state.totalPrice = state.items.reduce((sum, obj) => obj.price * obj.count + sum, 0);\n    },\n    clearItems: state => {\n      state.items = [];\n      state.totalPrice = 0;\n    }\n  }\n});\nexport const {\n  addItem,\n  removeItem,\n  clearItems,\n  minusItem\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","calcTotalPrice","GetCartFromLs","items","totalPrice","initialState","cartSlice","name","reducers","addItem","state","action","findItem","find","obj","id","payload","count","push","minusItem","reduce","sum","price","removeItem","filter","clearItems","actions","reducer"],"sources":["D:/Downloads/Computer-science/MyProject/react-pizza/src/redux/slices/cart/slice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { calcTotalPrice } from '../../../utils/calcTotalPrice'\r\nimport { GetCartFromLs } from '../../../utils/getCartFromLS'\r\nimport { RootState } from '../../store'\r\nimport { CartItem, CartSliceState } from './types'\r\n\r\n\r\n\r\nconst { items, totalPrice } = GetCartFromLs()\r\n\r\nconst initialState: CartSliceState = {\r\n    totalPrice,\r\n    items,\r\n}\r\n\r\nexport const cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        addItem: (state, action:PayloadAction<CartItem>) => {\r\n            const findItem = state.items.find((obj) => obj.id === action.payload.id)\r\n            if(findItem) {\r\n                findItem.count ++\r\n            } else {\r\n                state.items.push({\r\n                    ...action.payload,\r\n                    count: 1\r\n                })\r\n            }\r\n\r\n\r\n            state.totalPrice = calcTotalPrice(state.items)\r\n        },\r\n\r\n        minusItem: (state, action: PayloadAction<string>) => {\r\n            const findItem = state.items.find((obj) => obj.id === action.payload)\r\n            if(findItem) {\r\n                findItem.count --\r\n            }\r\n            state.totalPrice = state.items.reduce((sum, obj) => (obj.price * obj.count) + sum, 0)\r\n\r\n        },\r\n\r\n        removeItem: (state, action: PayloadAction<string>) => {\r\n            state.items = state.items.filter((obj) => obj.id !== action.payload)\r\n            state.totalPrice = state.items.reduce((sum, obj) => (obj.price * obj.count) + sum, 0)\r\n        },\r\n        clearItems: (state) => {\r\n            state.items = []\r\n            state.totalPrice = 0\r\n        },\r\n    },\r\n})\r\n\r\n\r\n\r\nexport const { addItem, removeItem, clearItems, minusItem } = cartSlice.actions\r\n\r\nexport default cartSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAC7D,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,SAASC,aAAa,QAAQ,8BAA8B;AAM5D,MAAM;EAAEC,KAAK;EAAEC;AAAW,CAAC,GAAGF,aAAa,EAAE;AAE7C,MAAMG,YAA4B,GAAG;EACjCD,UAAU;EACVD;AACJ,CAAC;AAED,OAAO,MAAMG,SAAS,GAAGN,WAAW,CAAC;EACjCO,IAAI,EAAE,MAAM;EACZF,YAAY;EACZG,QAAQ,EAAE;IACNC,OAAO,EAAE,CAACC,KAAK,EAAEC,MAA8B,KAAK;MAChD,MAAMC,QAAQ,GAAGF,KAAK,CAACP,KAAK,CAACU,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MACxE,IAAGH,QAAQ,EAAE;QACTA,QAAQ,CAACK,KAAK,EAAG;MACrB,CAAC,MAAM;QACHP,KAAK,CAACP,KAAK,CAACe,IAAI,CAAC;UACb,GAAGP,MAAM,CAACK,OAAO;UACjBC,KAAK,EAAE;QACX,CAAC,CAAC;MACN;MAGAP,KAAK,CAACN,UAAU,GAAGH,cAAc,CAACS,KAAK,CAACP,KAAK,CAAC;IAClD,CAAC;IAEDgB,SAAS,EAAE,CAACT,KAAK,EAAEC,MAA6B,KAAK;MACjD,MAAMC,QAAQ,GAAGF,KAAK,CAACP,KAAK,CAACU,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MACrE,IAAGJ,QAAQ,EAAE;QACTA,QAAQ,CAACK,KAAK,EAAG;MACrB;MACAP,KAAK,CAACN,UAAU,GAAGM,KAAK,CAACP,KAAK,CAACiB,MAAM,CAAC,CAACC,GAAG,EAAEP,GAAG,KAAMA,GAAG,CAACQ,KAAK,GAAGR,GAAG,CAACG,KAAK,GAAII,GAAG,EAAE,CAAC,CAAC;IAEzF,CAAC;IAEDE,UAAU,EAAE,CAACb,KAAK,EAAEC,MAA6B,KAAK;MAClDD,KAAK,CAACP,KAAK,GAAGO,KAAK,CAACP,KAAK,CAACqB,MAAM,CAAEV,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAAC;MACpEN,KAAK,CAACN,UAAU,GAAGM,KAAK,CAACP,KAAK,CAACiB,MAAM,CAAC,CAACC,GAAG,EAAEP,GAAG,KAAMA,GAAG,CAACQ,KAAK,GAAGR,GAAG,CAACG,KAAK,GAAII,GAAG,EAAE,CAAC,CAAC;IACzF,CAAC;IACDI,UAAU,EAAGf,KAAK,IAAK;MACnBA,KAAK,CAACP,KAAK,GAAG,EAAE;MAChBO,KAAK,CAACN,UAAU,GAAG,CAAC;IACxB;EACJ;AACJ,CAAC,CAAC;AAIF,OAAO,MAAM;EAAEK,OAAO;EAAEc,UAAU;EAAEE,UAAU;EAAEN;AAAU,CAAC,GAAGb,SAAS,CAACoB,OAAO;AAE/E,eAAepB,SAAS,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}